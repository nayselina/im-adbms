package panels;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Sales Reporting panel for restaurant admin interface
 * @author 63906
 */
public class SalesReporting extends javax.swing.JPanel {
    
    // UI Components
    private JPanel headerPanel;
    private JPanel timeframePanel;
    private JPanel statsPanel;
    private JPanel chartPanel;
    private JPanel topSellersPanel;
    private JPanel mainContentPanel;
    
    private JButton btnDaily;
    private JButton btnWeekly;
    private JButton btnMonthly;
    private JButton btnCustom;
    private JButton btnExport;
    
    private JComboBox<String> dateSelector;
    
    private BarChartPanel hourlyChartPanel;
    
    // Data
    private String currentTimeframe = "Daily";
    private String selectedDate = "April 20, 2025"; // Default value
    private double totalSales = 1257.89;
    private int totalOrders = 78;
    private double avgOrderValue = 16.13;
    private double previousTotalSales = 1123.12;
    private int previousTotalOrders = 72;
    private double previousAvgOrderValue = 15.66;
    
    // Sale data for hourly chart
    private Map<String, Double> hourlyData;
    
    // Top sellers data
    private class TopSellerItem {
        String name;
        int quantity;
        double revenue;
        
        public TopSellerItem(String name, int quantity, double revenue) {
            this.name = name;
            this.quantity = quantity;
            this.revenue = revenue;
        }
    }
    
    private ArrayList<TopSellerItem> topSellers;
    
    /**
     * Creates new form SalesReporting
     */
    public SalesReporting() {
        initializeData();
        initComponents();
    }
    
    /**
     * Initialize sample data
     */
    private void initializeData() {
        // Initialize hourly data
        hourlyData = new LinkedHashMap<>();
        hourlyData.put("8AM", 75.0);
        hourlyData.put("9AM", 115.0);
        hourlyData.put("10AM", 215.0);
        hourlyData.put("11AM", 285.0);
        hourlyData.put("12PM", 305.0);
        hourlyData.put("1PM", 265.0);
        hourlyData.put("2PM", 190.0);
        hourlyData.put("3PM", 125.0);
        hourlyData.put("4PM", 85.0);
        
        // Initialize top sellers data
        topSellers = new ArrayList<>();
        topSellers.add(new TopSellerItem("Classic Cheeseburger", 34, 271.66));
        topSellers.add(new TopSellerItem("Bacon Deluxe", 29, 347.88));
        topSellers.add(new TopSellerItem("Veggie Supreme", 15, 149.85));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        // Set layout
        setLayout(new BorderLayout());
        setBackground(new Color(243, 244, 246)); // Light gray background
        
        // Create header panel
        createHeaderPanel();
        add(headerPanel, BorderLayout.NORTH);
        
        // Create main content panel
        mainContentPanel = new JPanel();
        mainContentPanel.setLayout(new BorderLayout());
        mainContentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // Create white card panel with shadow effect
        JPanel cardPanel = new JPanel();
        cardPanel.setLayout(new BorderLayout());
        cardPanel.setBackground(Color.WHITE);
        cardPanel.setBorder(BorderFactory.createCompoundBorder(
                new SoftBevelBorder(BevelBorder.RAISED, Color.WHITE, Color.LIGHT_GRAY),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));
        
        // Create timeframe panel and date selector
        createTimeframePanel();
        
        // Create statistics panel
        createStatsPanel();
        
        // Create hourly chart panel
        createChartPanel();
        
        // Create top sellers panel
        createTopSellersPanel();
        
        // Add components to main card panel
        JPanel topPanel = new JPanel(new BorderLayout(10, 10));
        topPanel.setBackground(Color.WHITE);
        topPanel.add(timeframePanel, BorderLayout.CENTER);
        
        JPanel centerPanel = new JPanel(new BorderLayout(10, 10));
        centerPanel.setBackground(Color.WHITE);
        centerPanel.add(statsPanel, BorderLayout.NORTH);
        centerPanel.add(chartPanel, BorderLayout.CENTER);
        
        cardPanel.add(topPanel, BorderLayout.NORTH);
        cardPanel.add(centerPanel, BorderLayout.CENTER);
        
        mainContentPanel.add(cardPanel, BorderLayout.CENTER);
        mainContentPanel.add(topSellersPanel, BorderLayout.EAST);
        
        add(mainContentPanel, BorderLayout.CENTER);
    }
    
    /**
     * Create header panel with title
     */
    private void createHeaderPanel() {
        headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0));
        headerPanel.setBackground(new Color(243, 244, 246));
        
        JLabel lblTitle = new JLabel("Sales Reporting");
        lblTitle.setFont(new Font("Arial", Font.BOLD, 24));
        lblTitle.setForeground(new Color(21, 128, 61)); // Green color
        
        headerPanel.add(lblTitle, BorderLayout.WEST);
    }
    
    /**
     * Create timeframe buttons and date selector panel
     */
    private void createTimeframePanel() {
        timeframePanel = new JPanel(new BorderLayout(10, 10));
        timeframePanel.setBackground(Color.WHITE);
        
        // Create timeframe buttons panel
        JPanel buttonsPanel = new JPanel(new GridLayout(1, 4, 10, 0));
        buttonsPanel.setBackground(Color.WHITE);
        
        btnDaily = createTimeframeButton("Daily", true);
        btnWeekly = createTimeframeButton("Weekly", false);
        btnMonthly = createTimeframeButton("Monthly", false);
        btnCustom = createTimeframeButton("Custom", false);
        
        buttonsPanel.add(btnDaily);
        buttonsPanel.add(btnWeekly);
        buttonsPanel.add(btnMonthly);
        buttonsPanel.add(btnCustom);
        
        // Create date selector and export button panel
        JPanel dateExportPanel = new JPanel(new BorderLayout(10, 0));
        dateExportPanel.setBackground(Color.WHITE);
        dateExportPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
        
        // Create date selector
        dateSelector = new JComboBox<>();
        dateSelector.setModel(new DefaultComboBoxModel<>(new String[]{"April 20, 2025"}));
        dateSelector.setBorder(BorderFactory.createLineBorder(new Color(209, 213, 219)));
        
        // Create export button
        btnExport = new JButton("Export");
        btnExport.setBackground(new Color(107, 114, 128));
        btnExport.setForeground(Color.WHITE);
        btnExport.setFocusPainted(false);
        btnExport.setBorderPainted(false);
        
        // Add action listeners
        btnDaily.addActionListener(e -> changeTimeframe("Daily"));
        btnWeekly.addActionListener(e -> changeTimeframe("Weekly"));
        btnMonthly.addActionListener(e -> changeTimeframe("Monthly"));
        btnCustom.addActionListener(e -> changeTimeframe("Custom"));
        btnExport.addActionListener(e -> exportReport());
        
        // Fix: Add the listener after initially populating the date selector
        dateSelector.addActionListener(e -> {
            if (dateSelector.getSelectedItem() != null) {
                updateReportData();
            }
        });
        
        dateExportPanel.add(dateSelector, BorderLayout.CENTER);
        dateExportPanel.add(btnExport, BorderLayout.EAST);
        
        timeframePanel.add(buttonsPanel, BorderLayout.NORTH);
        timeframePanel.add(dateExportPanel, BorderLayout.SOUTH);
    }
    
    /**
     * Create statistics panel with key metrics
     */
    private void createStatsPanel() {
        statsPanel = new JPanel(new GridLayout(1, 3, 10, 0));
        statsPanel.setBackground(Color.WHITE);
        statsPanel.setBorder(BorderFactory.createEmptyBorder(15, 0, 15, 0));
        
        // Create the three stat cards
        JPanel totalSalesCard = createStatCard(
                "TOTAL SALES", 
                "$" + new DecimalFormat("0.00").format(totalSales),
                calculatePercentageChange(totalSales, previousTotalSales),
                new Color(240, 253, 244), // Light green background
                new Color(21, 128, 61)    // Green text
        );
        
        JPanel ordersCard = createStatCard(
                "ORDERS", 
                Integer.toString(totalOrders),
                calculatePercentageChange(totalOrders, previousTotalOrders),
                new Color(255, 247, 237), // Light orange background
                new Color(234, 88, 12)    // Orange text
        );
        
        JPanel avgValueCard = createStatCard(
                "AVG ORDER VALUE", 
                "$" + new DecimalFormat("0.00").format(avgOrderValue),
                calculatePercentageChange(avgOrderValue, previousAvgOrderValue),
                new Color(239, 246, 255), // Light blue background
                new Color(59, 130, 246)   // Blue text
        );
        
        statsPanel.add(totalSalesCard);
        statsPanel.add(ordersCard);
        statsPanel.add(avgValueCard);
    }
    
    /**
     * Create hourly chart panel
     */
    private void createChartPanel() {
        chartPanel = new JPanel(new BorderLayout(0, 10));
        chartPanel.setBackground(Color.WHITE);
        chartPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
        
        // Create title panel
        JPanel titlePanel = new JPanel(new BorderLayout());
        titlePanel.setBackground(Color.WHITE);
        JLabel lblChartTitle = new JLabel("Hourly Sales - " + selectedDate);
        lblChartTitle.setFont(new Font("Arial", Font.BOLD, 16));
        lblChartTitle.setForeground(new Color(55, 65, 81));
        titlePanel.add(lblChartTitle, BorderLayout.WEST);
        
        // Create chart using our custom bar chart panel
        hourlyChartPanel = new BarChartPanel(hourlyData);
        
        chartPanel.add(titlePanel, BorderLayout.NORTH);
        chartPanel.add(hourlyChartPanel, BorderLayout.CENTER);
    }
    
    /**
     * Create top sellers panel
     */
    private void createTopSellersPanel() {
        topSellersPanel = new JPanel(new BorderLayout(0, 10));
        topSellersPanel.setBackground(Color.WHITE);
        topSellersPanel.setBorder(BorderFactory.createCompoundBorder(
                new SoftBevelBorder(BevelBorder.RAISED, Color.WHITE, Color.LIGHT_GRAY),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));
        topSellersPanel.setPreferredSize(new Dimension(250, 0));
        
        // Create title panel
        JPanel titlePanel = new JPanel(new BorderLayout());
        titlePanel.setBackground(Color.WHITE);
        titlePanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        
        JLabel lblTitle = new JLabel("Top Sellers");
        lblTitle.setFont(new Font("Arial", Font.BOLD, 16));
        lblTitle.setForeground(new Color(55, 65, 81));
        titlePanel.add(lblTitle, BorderLayout.WEST);
        
        // Create sellers list panel
        JPanel sellersListPanel = new JPanel();
        sellersListPanel.setLayout(new BoxLayout(sellersListPanel, BoxLayout.Y_AXIS));
        sellersListPanel.setBackground(Color.WHITE);
        
        // Add top sellers items
        for (int i = 0; i < topSellers.size(); i++) {
            TopSellerItem item = topSellers.get(i);
            JPanel itemPanel = createTopSellerItemPanel(i + 1, item);
            sellersListPanel.add(itemPanel);
            
            // Add spacing between items
            if (i < topSellers.size() - 1) {
                sellersListPanel.add(Box.createRigidArea(new Dimension(0, 15)));
            }
        }
        
        topSellersPanel.add(titlePanel, BorderLayout.NORTH);
        topSellersPanel.add(sellersListPanel, BorderLayout.CENTER);
    }
    
    /**
     * Create a timeframe button with specified text and active state
     */
    private JButton createTimeframeButton(String text, boolean isActive) {
        JButton button = new JButton(text);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        
        if (isActive) {
            button.setBackground(new Color(21, 128, 61));
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(new Color(229, 231, 235));
            button.setForeground(new Color(55, 65, 81));
        }
        
        return button;
    }
    
    /**
     * Create a statistics card with title, value, and change percentage
     */
    private JPanel createStatCard(String title, String value, double percentChange, Color bgColor, Color textColor) {
        JPanel card = new JPanel(new BorderLayout(0, 5));
        card.setBackground(bgColor);
        card.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(bgColor.darker(), 1),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));
        
        // Title label
        JLabel lblTitle = new JLabel(title);
        lblTitle.setFont(new Font("Arial", Font.PLAIN, 14));
        lblTitle.setForeground(new Color(55, 65, 81));
        
        // Value label
        JLabel lblValue = new JLabel(value);
        lblValue.setFont(new Font("Arial", Font.BOLD, 28));
        lblValue.setForeground(textColor);
        
        // Percentage change label
        String changeText = (percentChange >= 0 ? "↑ " : "↓ ") + 
                Math.abs(Math.round(percentChange)) + "% from yesterday";
        JLabel lblChange = new JLabel(changeText);
        lblChange.setFont(new Font("Arial", Font.PLAIN, 12));
        lblChange.setForeground(percentChange >= 0 ? new Color(21, 128, 61) : new Color(220, 38, 38));
        
        // Add components to card
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(bgColor);
        topPanel.add(lblTitle, BorderLayout.NORTH);
        
        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBackground(bgColor);
        centerPanel.add(lblValue, BorderLayout.NORTH);
        centerPanel.add(lblChange, BorderLayout.CENTER);
        
        card.add(topPanel, BorderLayout.NORTH);
        card.add(centerPanel, BorderLayout.CENTER);
        
        return card;
    }
    
    /**
     * Custom Bar Chart Panel implementation to replace JFreeChart
     */
    private class BarChartPanel extends JPanel {
        private Map<String, Double> data;
        private double maxValue;
        
        public BarChartPanel(Map<String, Double> data) {
            this.data = data;
            this.maxValue = data.values().stream().max(Double::compare).orElse(0.0);
            setBackground(Color.WHITE);
            setPreferredSize(new Dimension(600, 300));
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            int width = getWidth();
            int height = getHeight();
            int chartHeight = height - 50; // Reserve space for labels
            int barWidth = (width - 60) / data.size();
            int spacing = 10;
            int bottomMargin = 35;
            
            // Draw Y-axis grid lines
            g2.setColor(new Color(229, 231, 235));
            double yStep = chartHeight / 5.0;
            for (int i = 0; i <= 5; i++) {
                int y = height - bottomMargin - (int)(i * yStep);
                g2.drawLine(30, y, width - 30, y);
                
                // Draw Y-axis labels
                g2.setColor(new Color(107, 114, 128));
                g2.setFont(new Font("Arial", Font.PLAIN, 10));
                String label = String.format("$%.0f", (maxValue / 5) * i);
                g2.drawString(label, 5, y + 4);
                g2.setColor(new Color(229, 231, 235));
            }
            
            // Draw bars and X-axis labels
            int x = 40;
            int index = 0;
            for (Map.Entry<String, Double> entry : data.entrySet()) {
                double value = entry.getValue();
                int barHeight = (int)((value / maxValue) * chartHeight);
                
                // Draw bar
                g2.setColor(new Color(21, 128, 61));
                g2.fillRect(x, height - bottomMargin - barHeight, barWidth - spacing, barHeight);
                
                // Draw X-axis label
                g2.setColor(new Color(107, 114, 128));
                g2.setFont(new Font("Arial", Font.PLAIN, 10));
                g2.drawString(entry.getKey(), x, height - 10);
                
                x += barWidth;
                index++;
            }
        }
    }
    
    /**
     * Create a panel for displaying top seller item
     */
    private JPanel createTopSellerItemPanel(int rank, TopSellerItem item) {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setBackground(Color.WHITE);
        
        // Rank number
        JLabel lblRank = new JLabel(rank + ".");
        lblRank.setFont(new Font("Arial", Font.BOLD, 16));
        lblRank.setForeground(new Color(55, 65, 81));
        lblRank.setPreferredSize(new Dimension(25, 20));
        
        // Item details
        JPanel detailsPanel = new JPanel();
        detailsPanel.setLayout(new BoxLayout(detailsPanel, BoxLayout.Y_AXIS));
        detailsPanel.setBackground(Color.WHITE);
        
        JLabel lblName = new JLabel(item.name);
        lblName.setFont(new Font("Arial", Font.BOLD, 14));
        lblName.setForeground(new Color(55, 65, 81));
        lblName.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel lblStats = new JLabel(item.quantity + " sold - $" + new DecimalFormat("0.00").format(item.revenue));
        lblStats.setFont(new Font("Arial", Font.PLAIN, 12));
        lblStats.setForeground(new Color(107, 114, 128));
        lblStats.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        detailsPanel.add(lblName);
        detailsPanel.add(Box.createRigidArea(new Dimension(0, 2)));
        detailsPanel.add(lblStats);
        
        panel.add(lblRank, BorderLayout.WEST);
        panel.add(detailsPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    /**
     * Change the current timeframe and update UI
     */
    private void changeTimeframe(String timeframe) {
        currentTimeframe = timeframe;
        
        // Update button styles
        btnDaily.setBackground(timeframe.equals("Daily") ? new Color(21, 128, 61) : new Color(229, 231, 235));
        btnDaily.setForeground(timeframe.equals("Daily") ? Color.WHITE : new Color(55, 65, 81));
        
        btnWeekly.setBackground(timeframe.equals("Weekly") ? new Color(21, 128, 61) : new Color(229, 231, 235));
        btnWeekly.setForeground(timeframe.equals("Weekly") ? Color.WHITE : new Color(55, 65, 81));
        
        btnMonthly.setBackground(timeframe.equals("Monthly") ? new Color(21, 128, 61) : new Color(229, 231, 235));
        btnMonthly.setForeground(timeframe.equals("Monthly") ? Color.WHITE : new Color(55, 65, 81));
        
        btnCustom.setBackground(timeframe.equals("Custom") ? new Color(21, 128, 61) : new Color(229, 231, 235));
        btnCustom.setForeground(timeframe.equals("Custom") ? Color.WHITE : new Color(55, 65, 81));
        
        // Fix: Remove listener temporarily to prevent the NPE during removeAllItems()
        ActionListener[] listeners = dateSelector.getActionListeners();
        for (ActionListener listener : listeners) {
            dateSelector.removeActionListener(listener);
        }
        
        // Update date selector items based on timeframe
        updateDateSelectors(timeframe);
        
        // Fix: Re-add listeners after the combobox has been populated
        for (ActionListener listener : listeners) {
            dateSelector.addActionListener(listener);
        }
        
        // Fix: Now that we've safely updated the combobox, update the report data
        if (dateSelector.getSelectedItem() != null) {
            selectedDate = dateSelector.getSelectedItem().toString();
            updateReportData();
        }
    }
    
    /**
     * Update date selector options based on selected timeframe
     */
    private void updateDateSelectors(String timeframe) {
        dateSelector.removeAllItems();
        
        switch (timeframe) {
            case "Daily":
                dateSelector.addItem("April 20, 2025");
                dateSelector.addItem("April 19, 2025");
                dateSelector.addItem("April 18, 2025");
                break;
            case "Weekly":
                dateSelector.addItem("Week of April 14-20, 2025");
                dateSelector.addItem("Week of April 7-13, 2025");
                dateSelector.addItem("Week of March 31-April 6, 2025");
                break;
            case "Monthly":
                dateSelector.addItem("April 2025");
                dateSelector.addItem("March 2025");
                dateSelector.addItem("February 2025");
                break;
            case "Custom":
                dateSelector.addItem("Select custom date range");
                break;
        }
    }
    
    /**
     * Update the report data based on selected date and timeframe
     */
    private void updateReportData() {
        // Fix: Check if date selector has a selection before proceeding
        if (dateSelector.getSelectedItem() == null) {
            return; // Exit if nothing is selected
        }
        
        selectedDate = dateSelector.getSelectedItem().toString();
        
        // In a real application, this would fetch data from a database
        // For this example, we'll simulate different data based on selection
        if (selectedDate.equals("April 20, 2025") || selectedDate.equals("Week of April 14-20, 2025") || selectedDate.equals("April 2025")) {
            // Use default values already set in initializeData()
            totalSales = 1257.89;
            totalOrders = 78;
            avgOrderValue = 16.13;
            previousTotalSales = 1123.12;
            previousTotalOrders = 72;
            previousAvgOrderValue = 15.66;
            
            // Reset hourly data to default
            hourlyData.clear();
            hourlyData.put("8AM", 75.0);
            hourlyData.put("9AM", 115.0);
            hourlyData.put("10AM", 215.0);
            hourlyData.put("11AM", 285.0);
            hourlyData.put("12PM", 305.0);
            hourlyData.put("1PM", 265.0);
            hourlyData.put("2PM", 190.0);
            hourlyData.put("3PM", 125.0);
            hourlyData.put("4PM", 85.0);
            
            // Reset top sellers to default
            topSellers.clear();
            topSellers.add(new TopSellerItem("Classic Cheeseburger", 34, 271.66));
            topSellers.add(new TopSellerItem("Bacon Deluxe", 29, 347.88));
            topSellers.add(new TopSellerItem("Veggie Supreme", 15, 149.85));
        } else {
            // Simulate different data for different selections
            totalSales = 1056.42;
            totalOrders = 65;
            avgOrderValue = 16.25;
            previousTotalSales = 1123.12;
            previousTotalOrders = 69;
            previousAvgOrderValue = 16.28;
            
            // Update hourly data
            hourlyData.clear();
            hourlyData.put("8AM", 65.0);
            hourlyData.put("9AM", 95.0);
            hourlyData.put("10AM", 195.0);
            hourlyData.put("11AM", 245.0);
            hourlyData.put("12PM", 265.0);
            hourlyData.put("1PM", 225.0);
            hourlyData.put("2PM", 170.0);
            hourlyData.put("3PM", 105.0);
            hourlyData.put("4PM", 65.0);
            
            // Update top sellers
            topSellers.clear();
            topSellers.add(new TopSellerItem("Bacon Deluxe", 27, 323.73));
            topSellers.add(new TopSellerItem("Classic Cheeseburger", 24, 191.76));
            topSellers.add(new TopSellerItem("Double Trouble", 14, 209.86));
        }
        
        // Update UI
        refreshReportUI();
    }
    
    /**
     * Refresh the entire report UI with current data
     */
    private void refreshReportUI() {
        // Remove old components
        mainContentPanel.removeAll();
        
        // Recreate components with updated data
        createStatsPanel();
        createChartPanel();
        createTopSellersPanel();
        
        // Add components to main card panel
        JPanel cardPanel = new JPanel();
        cardPanel.setLayout(new BorderLayout());
        cardPanel.setBackground(Color.WHITE);
        cardPanel.setBorder(BorderFactory.createCompoundBorder(
                new SoftBevelBorder(BevelBorder.RAISED, Color.WHITE, Color.LIGHT_GRAY),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));
        
        JPanel topPanel = new JPanel(new BorderLayout(10, 10));
        topPanel.setBackground(Color.WHITE);
        topPanel.add(timeframePanel, BorderLayout.CENTER);
        
        JPanel centerPanel = new JPanel(new BorderLayout(10, 10));
        centerPanel.setBackground(Color.WHITE);
        centerPanel.add(statsPanel, BorderLayout.NORTH);
        centerPanel.add(chartPanel, BorderLayout.CENTER);
        
        cardPanel.add(topPanel, BorderLayout.NORTH);
        cardPanel.add(centerPanel, BorderLayout.CENTER);
        
        mainContentPanel.add(cardPanel, BorderLayout.CENTER);
        mainContentPanel.add(topSellersPanel, BorderLayout.EAST);
        
        // Refresh the panel
        mainContentPanel.revalidate();
        mainContentPanel.repaint();
    }
    
    /**
     * Calculate percentage change between two values
     */
    private double calculatePercentageChange(double current, double previous) {
        if (previous == 0) return 0;
        return ((current - previous) / previous) * 100;
    }
    
    /**
     * Export current report to file
     */
    private void exportReport() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Export Report");
        
        int userSelection = fileChooser.showSaveDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, 
                    "Report exported successfully to " + fileChooser.getSelectedFile().getName(),
                    "Export Success", 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * Main method for testing the panel
     */
    public static void main(String args[]) {
        try {
            // Set system look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Create and display the form
        java.awt.EventQueue.invokeLater(() -> {
            JFrame frame = new JFrame("Sales Reporting");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.add(new SalesReporting());
            frame.pack();
            frame.setSize(1000, 650);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
